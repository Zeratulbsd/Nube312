
package nubeConceptos;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Palabras extends javax.swing.JFrame {
    int contador = 0, total[];
    texto dt = new texto(this);
    String archivo = "src/Texto/contenido.txt";
    String palabras[], strAyuda[], contenido;
    String[] conector;
    
    /**
     * Creates new form Nube
     */
    public Palabras() throws IOException {
        conector = strConector();
        leerArchivo();
        initComponents();
                model = (DefaultTableModel) jTable1.getModel();
System.out.print(Arrays.toString(total));
for(int a=0;a<total.length;a++){
                model.setValueAt(palabras[a], a, 0);

                model.setValueAt(total[a], a, 1);
}
    } 
    private DefaultTableModel model;

    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        dt.paint(g2d);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "palabra", "total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(635, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 367, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public String[] strConector(){
        String[] c = {"un","para","Para","todo","Todo","En","en","que","Que","con","Con","Y","y","su","Su","sus","Sus",
                        "a","A","de","De","del","Del","La","la","Las","las","al","Al","Lo","lo","Los","los","el","El","Un",
                        "Ya","ya","se","Se","Por","por","una","Una","Así","así","o","O","e","E","u","como","Como","sino",
                        "Sino","sin","Sin","tan","Tan","ha","Ha","vez","Vez","ante","Ante","antes","Antes","Después","después",
                        "cual","luego","Luego","Otra","otra","Otras","otras","Otro","otro","Otros","otros","último","sobre",
                        "Sobre","Además","además","decir","ejemplo","dado","Dado","debido","Debido","causa","pues","Pues",
                        "porque","Porque","tal","Tal","si","Si","esa","Esa","ese","Ese","eso","Eso","puesto","Puesto","también",
                        "También","mismo","misma","asumiendo","caso","siempre","Siempre","fin","manera","forma","modo","Después",
                        "durante","Durante","hasta","Hasta","hay","más","Más","ahí","entonces","Entonces","pesar","aunque",
                        "Aunque","no","No","Mientras","mientras","embargo","ahora","Ahora","antes","Antes","apenas","Apenas",
                        "desde","Desde","cuando","Cuando","después","conclusión","efecto","esto","estos","Esto","esta","estas",
                        "Esta","este","Este","solo","Consecuencia","consecuencia","aún","Aún","menos","Muy","muy"};;
        return c;
    }
    
    public void leerArchivo() throws FileNotFoundException, IOException{
        FileReader file = new FileReader(archivo);
        BufferedReader bf = new BufferedReader(file);
        String texto, separador = " "; 
        StringBuffer aux = new StringBuffer();
        
        while((texto = bf.readLine())!=null){
            aux.append(separador + texto);
        }
        
        contenido = aux.toString();
        bf.close();
        
        //System.out.println(contenido);
        extraerPalabras();
    }
    
    public void extraerPalabras(){
        if(contenido!=null){
            int f=0;
            String[] partir = contenido.split(" |\\.|\\,|\\(|\\)|\\:|\\;");
            strAyuda = new String[partir.length];
            for(int i=0; i<partir.length; i++){
                if(partir[i].length()!= 0){
                    for(int j=0; j<conector.length; j++){
                        if(conector[j].equals(partir[i])){
                            j=conector.length;
                            f=1;
                        }else{
                            f=0;
                        }
                    }
                    if(f!=1){
                        strAyuda[contador] = partir[i];
                        //System.out.print(strAyuda[contador] + "-");
                        contador++;
                        f=0;
                    }
                }
            }
            strAyuda = resizeArray(contador,strAyuda);
            contador=0;
            contarPalabras();
        }else{
            JOptionPane.showMessageDialog(this,"Texto No Guardado");
        }
    }
    
    public void contarPalabras(){
        String[] aux = strAyuda;
        palabras = new String[strAyuda.length];
        total = new int[strAyuda.length];
        
        for(int i=0; i<total.length; i++){
            total[i]=1;
        }
        System.out.println("                 ");
        for(int i=0; i<aux.length; i++){
            if(aux[i].length()!=0){
                palabras[contador] = aux[i];
                for(int j=i+1; j<aux.length; j++){
                    if(palabras[contador].equals(aux[j])){
                        total[contador] += 1;
                        aux[j] = "       ";
                    }
                }
                contador++;
            }
        }
        palabras = resizeArray(contador,palabras);
        total = resizeInt(contador, total);
        contador=0;
        ordenarBurbuja();

    }
   
    
    public String[] resizeArray(int resize, String[] a){
        String[] b =  new String[resize];
        System.arraycopy(a, 0, b, 0,resize);
        return b;
    }
    
    public int[] resizeInt(int resize, int[] e){
        int[] b =  new int[resize];
        System.arraycopy(e, 0, b, 0,resize);
        return b;
    }
    
    public void ordenarBurbuja(){
        String strTemp;
        int t = total.length, temp;
        System.out.print("\n");
        for(int i=1; i<t; i++){
            for(int j=t-1; j>=i; j--){
                if(total[j]>total[j-1]){
                    temp = total[j-1];
                    strTemp = palabras[j-1];
                            
                    total[j-1] = total[j];
                    palabras[j-1] = palabras[j];
                    
                    total[j] = temp; 
                    palabras[j] = strTemp;
               }
            }
        }
        for(int i=0; i<total.length; i++){
            System.out.println(palabras[i] + "-> veces repetido:"+total[i]);
        }

        showWords();
    }
    
    public void showWords(){
        int h = 1100, yi = 60, c=0, temp;
        int t = total.length, tx = 10, ty = 80, tt = yi + 8;
        int[] x = new int[t];
        int[] y = new int[t];
        int[] tam = new int[t];
        int[] ancho = new int[t];
        
        for(int i=0; i<t; i++){
            if(c!=total[i]){
                c = total[i];
                tt -= 7;
            }
            tam[i] = tt;
            temp = tamanoLetra(palabras[i], (tam[i]/2)+5);
            ancho[i] = temp;
            
            if((tx+temp)>h){
                ty += yi;
                tx = 10;
                x[i] = tx;
            }else{
                x[i] = tx;
            }
            tx += temp;
            y[i] = ty;
        }
        dt.datosPalabra(palabras,x,y,tam, ancho);

    }
    
    public int tamanoLetra(String letra, int inc){
        int tam=0;
        for(int a=0; a<letra.length(); a++){
            if(Character.isUpperCase(letra.charAt(a))){
                tam += inc*2;
            }else if(letra.charAt(a)=='i'||letra.charAt(a)=='l'||letra.charAt(a)=='j'||letra.charAt(a)=='r'||letra.charAt(a)=='t'||letra.charAt(a)=='f'){
                tam += inc/2;
            }else{
                tam += inc;
            }
        }
        return tam;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Palabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Palabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Palabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Palabras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    
                    new Palabras().setVisible(true);
      
                } catch (IOException ex) {
                    Logger.getLogger(Palabras.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private static class color {
 
        public color() {
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
